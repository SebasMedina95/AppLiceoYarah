spring.application.name=yarah-ms-users
server.port=18882
custom.activeProfileName=local

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

# Configuracion de base de datos.

# Cuando usamos host.docker.internal es porque hablamos de consumos donde por ejemplo la BD esta por fuera de Docker
# spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/yarah_ms_users_db

# Cuando usamos localhost es porque trabajaremos localmente sin necesidad de Docker
# spring.datasource.url=jdbc:postgresql://localhost:5432/yarah_ms_users_db

# Trabajamos con Docker y sobre la misma red donde ya tenemos la base de datos asociada
# El yarah-db-ms-users es el nombre que le dimos al contenedor con la base de datos
# No olvidemos que en la creacion del contenedor de BD docker dijimos que la BD se llama yarah_ms_users_db
spring.datasource.url=jdbc:postgresql://yarah-db-ms-users:5432/yarah_ms_users_db

spring.datasource.username=postgres
spring.datasource.password=1234
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Visualizar consultas en la consola
spring.jpa.show-sql=true

# Documentacion swagger
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html

# Cada vez que actualicemos la entidad, actualizar BD.
spring.jpa.hibernate.ddl-auto=update

#Definicion de un contexto si llega a ser requerido
server.servlet.context-path=/business

# Configuracion para envios de email
# Para usar el envio de emails se debe colocar manualmente las credenciales
# y posteriormente generar el JAR para Docker, asi probaremos las apps.
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=sebastianmedinadev@gmail.com
spring.mail.password=kpbw fsmv dsyd gfcb
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true